// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/v1/booking.proto

package booking_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookingServiceClient is the client API for BookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingServiceClient interface {
	GetBookingByUUID(ctx context.Context, in *GetByUUIDBookingRequest, opts ...grpc.CallOption) (*GetBookingResponse, error)
	GetBookingByID(ctx context.Context, in *GetByIDBookingRequest, opts ...grpc.CallOption) (*GetBookingResponse, error)
	CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*CreateBookingResponse, error)
	UpdateBooking(ctx context.Context, in *UpdateBookingRequest, opts ...grpc.CallOption) (*UpdateBookingResponse, error)
	GetBookingStream(ctx context.Context, in *GetByIDBookingRequest, opts ...grpc.CallOption) (BookingService_GetBookingStreamClient, error)
	CreateBookingStream(ctx context.Context, opts ...grpc.CallOption) (BookingService_CreateBookingStreamClient, error)
}

type bookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingServiceClient(cc grpc.ClientConnInterface) BookingServiceClient {
	return &bookingServiceClient{cc}
}

func (c *bookingServiceClient) GetBookingByUUID(ctx context.Context, in *GetByUUIDBookingRequest, opts ...grpc.CallOption) (*GetBookingResponse, error) {
	out := new(GetBookingResponse)
	err := c.cc.Invoke(ctx, "/booking.v1.BookingService/GetBookingByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingByID(ctx context.Context, in *GetByIDBookingRequest, opts ...grpc.CallOption) (*GetBookingResponse, error) {
	out := new(GetBookingResponse)
	err := c.cc.Invoke(ctx, "/booking.v1.BookingService/GetBookingByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*CreateBookingResponse, error) {
	out := new(CreateBookingResponse)
	err := c.cc.Invoke(ctx, "/booking.v1.BookingService/CreateBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) UpdateBooking(ctx context.Context, in *UpdateBookingRequest, opts ...grpc.CallOption) (*UpdateBookingResponse, error) {
	out := new(UpdateBookingResponse)
	err := c.cc.Invoke(ctx, "/booking.v1.BookingService/UpdateBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingStream(ctx context.Context, in *GetByIDBookingRequest, opts ...grpc.CallOption) (BookingService_GetBookingStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookingService_ServiceDesc.Streams[0], "/booking.v1.BookingService/GetBookingStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookingServiceGetBookingStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookingService_GetBookingStreamClient interface {
	Recv() (*GetBookingResponse, error)
	grpc.ClientStream
}

type bookingServiceGetBookingStreamClient struct {
	grpc.ClientStream
}

func (x *bookingServiceGetBookingStreamClient) Recv() (*GetBookingResponse, error) {
	m := new(GetBookingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookingServiceClient) CreateBookingStream(ctx context.Context, opts ...grpc.CallOption) (BookingService_CreateBookingStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookingService_ServiceDesc.Streams[1], "/booking.v1.BookingService/CreateBookingStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookingServiceCreateBookingStreamClient{stream}
	return x, nil
}

type BookingService_CreateBookingStreamClient interface {
	Send(*CreateBookingRequest) error
	Recv() (*CreateBookingResponse, error)
	grpc.ClientStream
}

type bookingServiceCreateBookingStreamClient struct {
	grpc.ClientStream
}

func (x *bookingServiceCreateBookingStreamClient) Send(m *CreateBookingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bookingServiceCreateBookingStreamClient) Recv() (*CreateBookingResponse, error) {
	m := new(CreateBookingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookingServiceServer is the server API for BookingService service.
// All implementations must embed UnimplementedBookingServiceServer
// for forward compatibility
type BookingServiceServer interface {
	GetBookingByUUID(context.Context, *GetByUUIDBookingRequest) (*GetBookingResponse, error)
	GetBookingByID(context.Context, *GetByIDBookingRequest) (*GetBookingResponse, error)
	CreateBooking(context.Context, *CreateBookingRequest) (*CreateBookingResponse, error)
	UpdateBooking(context.Context, *UpdateBookingRequest) (*UpdateBookingResponse, error)
	GetBookingStream(*GetByIDBookingRequest, BookingService_GetBookingStreamServer) error
	CreateBookingStream(BookingService_CreateBookingStreamServer) error
	mustEmbedUnimplementedBookingServiceServer()
}

// UnimplementedBookingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServiceServer struct {
}

func (UnimplementedBookingServiceServer) GetBookingByUUID(context.Context, *GetByUUIDBookingRequest) (*GetBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingByUUID not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingByID(context.Context, *GetByIDBookingRequest) (*GetBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingByID not implemented")
}
func (UnimplementedBookingServiceServer) CreateBooking(context.Context, *CreateBookingRequest) (*CreateBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedBookingServiceServer) UpdateBooking(context.Context, *UpdateBookingRequest) (*UpdateBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBooking not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingStream(*GetByIDBookingRequest, BookingService_GetBookingStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBookingStream not implemented")
}
func (UnimplementedBookingServiceServer) CreateBookingStream(BookingService_CreateBookingStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateBookingStream not implemented")
}
func (UnimplementedBookingServiceServer) mustEmbedUnimplementedBookingServiceServer() {}

// UnsafeBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServiceServer will
// result in compilation errors.
type UnsafeBookingServiceServer interface {
	mustEmbedUnimplementedBookingServiceServer()
}

func RegisterBookingServiceServer(s grpc.ServiceRegistrar, srv BookingServiceServer) {
	s.RegisterService(&BookingService_ServiceDesc, srv)
}

func _BookingService_GetBookingByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUUIDBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.v1.BookingService/GetBookingByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingByUUID(ctx, req.(*GetByUUIDBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.v1.BookingService/GetBookingByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingByID(ctx, req.(*GetByIDBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.v1.BookingService/CreateBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).CreateBooking(ctx, req.(*CreateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_UpdateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).UpdateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.v1.BookingService/UpdateBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).UpdateBooking(ctx, req.(*UpdateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetByIDBookingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookingServiceServer).GetBookingStream(m, &bookingServiceGetBookingStreamServer{stream})
}

type BookingService_GetBookingStreamServer interface {
	Send(*GetBookingResponse) error
	grpc.ServerStream
}

type bookingServiceGetBookingStreamServer struct {
	grpc.ServerStream
}

func (x *bookingServiceGetBookingStreamServer) Send(m *GetBookingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BookingService_CreateBookingStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BookingServiceServer).CreateBookingStream(&bookingServiceCreateBookingStreamServer{stream})
}

type BookingService_CreateBookingStreamServer interface {
	Send(*CreateBookingResponse) error
	Recv() (*CreateBookingRequest, error)
	grpc.ServerStream
}

type bookingServiceCreateBookingStreamServer struct {
	grpc.ServerStream
}

func (x *bookingServiceCreateBookingStreamServer) Send(m *CreateBookingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bookingServiceCreateBookingStreamServer) Recv() (*CreateBookingRequest, error) {
	m := new(CreateBookingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookingService_ServiceDesc is the grpc.ServiceDesc for BookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booking.v1.BookingService",
	HandlerType: (*BookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBookingByUUID",
			Handler:    _BookingService_GetBookingByUUID_Handler,
		},
		{
			MethodName: "GetBookingByID",
			Handler:    _BookingService_GetBookingByID_Handler,
		},
		{
			MethodName: "CreateBooking",
			Handler:    _BookingService_CreateBooking_Handler,
		},
		{
			MethodName: "UpdateBooking",
			Handler:    _BookingService_UpdateBooking_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBookingStream",
			Handler:       _BookingService_GetBookingStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateBookingStream",
			Handler:       _BookingService_CreateBookingStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/booking.proto",
}
